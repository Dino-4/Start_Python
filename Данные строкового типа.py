#___________________Данные строкового типа_______________

#___________Длинна строки___________

# Длинной строки называют количество символов из которых она состоит.
# Что бы посчитать длину строки используется встроенная функция len()
s1 = 'abcdef'
length1 = len(s1)               # считаем длину строки из переменной s1
length2 = len('Python rocks!')  # считаем длину строкового литерала

print(length1)
print(length2)
# При подсчете длины строки считаются все символы, включая пробелы.
print('\n\n\n')


# __________________________Преобразование числа в строку______________

# Для преобразования числа в строку используется функция str()

num1 = 1777    # целое число
num2 = 17.77   # число с плавающей точкой
s1 = str(num1) # преобразовали целое число в строку '1777'
s2 = str(num2) # преобразовали число с плавающей точкой в строку '17.77'
print('\n\n\n')


#___________________________Конкатенация строк________________________
                    # Сложение строк или сцепление

s1 = 'ab' + 'bc'
s2 = 'bc' + 'ab'
s3 = s1 + s2 + '!!'
print(s1)
print(s2)
print(s3)
print('\n')

print('a', 'b', 'c', sep='*', end='!')        #<------ можно заменить параметры sep и end
print()  # переход на новую строку
print('a' + '*' + 'b' + '*' + 'c' + '!')
print('\n\n\n')



#__________________________Умножение строк на число________________________

# оператор повторяет строку указанное количество раз

s = 'Hi' * 4
print(s)
print('-' * 75)
#   Строку можно умножать на число, но нельзя умножать на строку



#________________________Примечание_______________________

# Тройные кавычки в Python используются для многострочного (multiline) текста.
text = '''Python is an interpreted, high-level, general-purpose programming language.
Created by Guido van Rossum and first released in 1991, Python design 
philosophy emphasizes code readability with its notable use of significant whitespace.'''

# примечание по использованию len в кокатенации
str1 = input()
num = str(len(str1))
print('Футбольная команда ' + str1 + ' имеет длину ' + num + ' символов')




#________________________Оператор in_________________

# В Python есть специальный оператор in, который позволяет проверить,
# что одна строка находится внутри другой.


s = 'https://pygen.ru/'
if 'a' in s:          # проверяет, содержится ли в переменной s символ 'a'
    print('Введенная строка содержит символ а')
else:
    print('Введенная строка не содержит символ а')

# ___________ Использование in вместе с логическими операторами ___________

s = input()
if '.' not in s:     #<--------- Используем in вместе с оператором not
    print('Введенная строка не содержит символа точки')


# благодаря оператору ин можно упростить следующий код
if s == 'a' or s == 'e' or s == 'i' or s == 'o' or s == 'u':
    print('YES')
# вот такой результат
if len(s) == 1 and s in 'aeiou':       # <-------!!!!!!!
    print('YES')

# С помощью оператора in мы можем проверять наличие сразу нескольких символов в строке.
s = 'Sigma'
print('a' in s)
print('z' in s)
print('\n\n\n')



#______________Точное вхождение_________________

# Оператор in проверяет, содержится ли одна строка в другой строке как точная последовательность символов.
# В обеих строках символы должны находиться в том же порядке друг относительно друга и не должны быть разделены другими символами,
# чтобы выражение с оператором in вернуло значение True.
print('ab' in 'abc') #True
print('ac' in 'abc') #False      # <-----------Запомни!!!!!!!!!!!!!!!!!



#___________ Чувствительность к регистру ____________________

# Проверка с использованием оператора in чувствительна к регистру.
s = 'Alpha'
print('p' in s) #True
print('P' in s) #False





